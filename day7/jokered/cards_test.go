package jokered_test

import (
	"advent2023/day7/jokered"
	"fmt"
	"testing"
)

func TestHandTypes(t *testing.T) {
	tests := []struct {
		hand jokered.Hand
		want jokered.HandType
	}{
		{
			jokered.Hand{
				jokered.Two,
				jokered.Three,
				jokered.Four,
				jokered.Five,
				jokered.Six,
			},
			jokered.HighCard,
		},
		{
			jokered.Hand{
				jokered.Two,
				jokered.Two,
				jokered.Two,
				jokered.Two,
				jokered.Two,
			},
			jokered.FiveOfAKind,
		},
		{
			jokered.Hand{
				jokered.Joker,
				jokered.Two,
				jokered.Two,
				jokered.Two,
				jokered.Two,
			},
			jokered.FiveOfAKind,
		},
		{
			jokered.Hand{
				jokered.Joker,
				jokered.Joker,
				jokered.Two,
				jokered.Two,
				jokered.Two,
			},
			jokered.FiveOfAKind,
		},
		{
			jokered.Hand{
				jokered.Joker,
				jokered.Joker,
				jokered.Joker,
				jokered.Two,
				jokered.Two,
			},
			jokered.FiveOfAKind,
		},
		{
			jokered.Hand{
				jokered.Joker,
				jokered.Joker,
				jokered.Joker,
				jokered.Joker,
				jokered.Two,
			},
			jokered.FiveOfAKind,
		},
		{
			jokered.Hand{
				jokered.Joker,
				jokered.Joker,
				jokered.Joker,
				jokered.Joker,
				jokered.Joker,
			},
			jokered.FiveOfAKind,
		},
		{
			jokered.Hand{
				jokered.Two,
				jokered.Three,
				jokered.Two,
				jokered.Two,
				jokered.Two,
			},
			jokered.FourOfAKind,
		},
		{
			jokered.Hand{
				jokered.Two,
				jokered.Three,
				jokered.Joker,
				jokered.Two,
				jokered.Two,
			},
			jokered.FourOfAKind,
		},
		{
			jokered.Hand{
				jokered.Two,
				jokered.Three,
				jokered.Joker,
				jokered.Joker,
				jokered.Two,
			},
			jokered.FourOfAKind,
		},
		{
			jokered.Hand{
				jokered.Two,
				jokered.Three,
				jokered.Joker,
				jokered.Joker,
				jokered.Joker,
			},
			jokered.FourOfAKind,
		},
		{
			jokered.Hand{
				jokered.Two,
				jokered.Two,
				jokered.Two,
				jokered.Three,
				jokered.Three,
			},
			jokered.FullHouse,
		},
		{
			jokered.Hand{
				jokered.Two,
				jokered.Two,
				jokered.Three,
				jokered.Three,
				jokered.Three,
			},
			jokered.FullHouse,
		},
		{
			jokered.Hand{
				jokered.Joker,
				jokered.Two,
				jokered.Two,
				jokered.Three,
				jokered.Three,
			},
			jokered.FullHouse,
		},
		{
			jokered.Hand{
				jokered.Joker,
				jokered.Two,
				jokered.Two,
				jokered.Three,
				jokered.Three,
			},
			jokered.FullHouse,
		},
		{
			jokered.Hand{
				jokered.Two,
				jokered.King,
				jokered.Three,
				jokered.Three,
				jokered.Three,
			},
			jokered.ThreeOfAKind,
		},
		{
			jokered.Hand{
				jokered.Three,
				jokered.Two,
				jokered.King,
				jokered.Three,
				jokered.Three,
			},
			jokered.ThreeOfAKind,
		},
		{
			jokered.Hand{
				jokered.Two,
				jokered.King,
				jokered.Joker,
				jokered.Three,
				jokered.Three,
			},
			jokered.ThreeOfAKind,
		},
		{
			jokered.Hand{
				jokered.Ten,
				jokered.Three,
				jokered.Queen,
				jokered.Joker,
				jokered.Joker,
			},
			jokered.ThreeOfAKind,
		},
		{
			jokered.Hand{
				jokered.Five,
				jokered.Ace,
				jokered.Joker,
				jokered.Three,
				jokered.Joker,
			},
			jokered.ThreeOfAKind,
		},
		{
			jokered.Hand{
				jokered.Three,
				jokered.Two,
				jokered.King,
				jokered.King,
				jokered.Three,
			},
			jokered.TwoPair,
		},
		{
			jokered.Hand{
				jokered.Two,
				jokered.King,
				jokered.Three,
				jokered.King,
				jokered.Three,
			},
			jokered.TwoPair,
		},
		{
			jokered.Hand{
				jokered.Two,
				jokered.King,
				jokered.Three,
				jokered.Queen,
				jokered.Three,
			},
			jokered.OnePair,
		},
		{
			jokered.Hand{
				jokered.Three,
				jokered.Three,
				jokered.Two,
				jokered.King,
				jokered.Queen,
			},
			jokered.OnePair,
		},
		{
			jokered.Hand{
				jokered.Two,
				jokered.King,
				jokered.Joker,
				jokered.Queen,
				jokered.Three,
			},
			jokered.OnePair,
		},
	}
	for i, tt := range tests {
		t.Run(
			fmt.Sprintf("%d hand types", i),
			func(t *testing.T) {
				handType := tt.hand.Type()
				if handType != tt.want {
					t.Errorf("hand type doesn't match expected\n type: %v\nexpected: %v\n", handType, tt.want)
				}
			},
		)
	}

}
